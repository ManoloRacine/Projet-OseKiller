openapi: 3.0.3
info:
  title: OSE Killer API
  version: 1.0.0
paths:
  /sign-up:
    post:
      tags:
        - Authentication
      summary: Envoyer une demande d'inscription
      description: Envoyer une demande d'inscription
      operationId: signUp
      requestBody:
        description: Demande d'inscription
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
        required: true
      responses:
        '202':
          description: Demande en attente d'acceptation
        '400':
          description: Format invalide / Attribut(s) manquant(s)
        '409':
          description: Email non disponible
  /sign-in:
    post:
      tags:
        - Authentication
      summary: Envoyer une demande de connection
      description: Envoyer une demande de connection
      operationId: signIn
      requestBody:
        description: Demande de connection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/SignInRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SignInRequest'
        required: true
      responses:
        '200':
          description: Demande de connection accepté
        '400':
          description: Format invalide / Attribut(s) manquant(s)
        '401':
          description: Informations d'identification invalides
  /sign-out:
    post:
      tags:
        - Authentication
      summary: Demande de révocation du refresh token
      description: Demande de révocation du refresh token
      operationId: signOut
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/TokenRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRequest'
        required: true
      responses:
        '200':
          description: Demande de révocation accepté
        '400':
          description: Format invalide / Attribut(s) manquant(s)
        '401':
          description: Token Invalide
        '403':
          description: Le token n'appartient pas à l'utilisateur
      security:
      - bearerAuth: []
  /refresh:
    post:
      tags:
        - Authentication
      summary: Demande d'un nouveau JWT Valide
      description: Demande d'un nouveau JWT
      operationId: refresh
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/TokenRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRequest'
        required: true
      responses:
        '200':
          description: Demande d'un nouveau JWT Valide accepté
        '400':
          description: Format invalide / Attribut(s) manquant(s)
        '401':
          description: Token Invalide ou Expiré
        
  /user/validate:
    post:
      tags:
        - Authentication
      summary: Validation de l'inscription
      description: Validation de l'inscription
      operationId: validateUser
      requestBody:
        description: Valider l'inscription d'un nouveau user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserValidationRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserValidationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserValidationRequest'
        required: true
      responses:
        '200':
          description: Validation a été complété
        '400':
          description: Format invalide / Attribut(s) manquant(s)
        '403':
          description: Requête non autorisée
      security:
        - bearerAuth: []
  /users:
    get:
      tags:
        - Authentication
      summary: Retourne tous les utilisateurs
      description: Retourne tous les utilisateurs
      operationId: getUsers
      responses:
        '200':
          description: Les utilisateurs ont été envoyés
        '400':
          description: Format invalide / Attribut(s) manquant(s)
        '403':
          description: Requête non autorisée
      security:
        - bearerAuth: []
  
  /ping:
    get:
      tags:
        - Ping
      summary: Demande de ping
      description: Demande de ping
      operationId: ping
      responses:
        '200':
          description: Demande de ping reçu
  /ping/token:
    get:
      tags:
        - Ping
      summary: Demande de ping par un l'utilisateur autentifié
      description: Demande de ping par un l'utilisateur autentifié
      operationId: ping
      responses:
        '200':
          description: Demande de ping reçu
        '401':
          description: Non autentifié
      security:
        - bearerAuth: []

components:
  securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT
  schemas:
    SignUpRequest:
      type: object
      properties:
        name:
          type: string
          example: Hugo Lantier
        email:
          type: string
          format: email
          example: hugol@example.com
        password:
          type: string
          example: vant8L52ANAp7U
        role:
          type: string
          example: STUDENT
          enum:
            - STUDENT
            - MANAGER
            - COMPANY
      xml:
        name: signUpRequest
    SignInRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: tesla.internship@example.com
        password:
          type: string
          example: vant8L52ANAp7U
      xml:
        name: signInRequest
    TokenRequest:
      type: object
      properties:
        refreshToken: 
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
      xml:
        name: signInRequest
    UserValidationRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: hugol@example.com
        valid:
          type: boolean
          example: true
      xml:
        name: userValidationRequest